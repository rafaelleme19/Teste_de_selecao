
Program_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08004398  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000330  20000010  080043a4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000340  080043a4  00020340  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010e1f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000233e  00000000  00000000  00030e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001430  00000000  00000000  000331a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001328  00000000  00000000  000345d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000215f9  00000000  00000000  000358f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bfff  00000000  00000000  00056ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d6f56  00000000  00000000  00062ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00139e46  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000054b4  00000000  00000000  00139ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080040f8 	.word	0x080040f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080040f8 	.word	0x080040f8

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b972 	b.w	800049c <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	4604      	mov	r4, r0
 80001d8:	4688      	mov	r8, r1
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d14b      	bne.n	8000276 <__udivmoddi4+0xa6>
 80001de:	428a      	cmp	r2, r1
 80001e0:	4615      	mov	r5, r2
 80001e2:	d967      	bls.n	80002b4 <__udivmoddi4+0xe4>
 80001e4:	fab2 f282 	clz	r2, r2
 80001e8:	b14a      	cbz	r2, 80001fe <__udivmoddi4+0x2e>
 80001ea:	f1c2 0720 	rsb	r7, r2, #32
 80001ee:	fa01 f302 	lsl.w	r3, r1, r2
 80001f2:	fa20 f707 	lsr.w	r7, r0, r7
 80001f6:	4095      	lsls	r5, r2
 80001f8:	ea47 0803 	orr.w	r8, r7, r3
 80001fc:	4094      	lsls	r4, r2
 80001fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	fbb8 f7fe 	udiv	r7, r8, lr
 8000208:	fa1f fc85 	uxth.w	ip, r5
 800020c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000210:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000214:	fb07 f10c 	mul.w	r1, r7, ip
 8000218:	4299      	cmp	r1, r3
 800021a:	d909      	bls.n	8000230 <__udivmoddi4+0x60>
 800021c:	18eb      	adds	r3, r5, r3
 800021e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000222:	f080 811b 	bcs.w	800045c <__udivmoddi4+0x28c>
 8000226:	4299      	cmp	r1, r3
 8000228:	f240 8118 	bls.w	800045c <__udivmoddi4+0x28c>
 800022c:	3f02      	subs	r7, #2
 800022e:	442b      	add	r3, r5
 8000230:	1a5b      	subs	r3, r3, r1
 8000232:	b2a4      	uxth	r4, r4
 8000234:	fbb3 f0fe 	udiv	r0, r3, lr
 8000238:	fb0e 3310 	mls	r3, lr, r0, r3
 800023c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000240:	fb00 fc0c 	mul.w	ip, r0, ip
 8000244:	45a4      	cmp	ip, r4
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x8c>
 8000248:	192c      	adds	r4, r5, r4
 800024a:	f100 33ff 	add.w	r3, r0, #4294967295
 800024e:	f080 8107 	bcs.w	8000460 <__udivmoddi4+0x290>
 8000252:	45a4      	cmp	ip, r4
 8000254:	f240 8104 	bls.w	8000460 <__udivmoddi4+0x290>
 8000258:	3802      	subs	r0, #2
 800025a:	442c      	add	r4, r5
 800025c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000260:	eba4 040c 	sub.w	r4, r4, ip
 8000264:	2700      	movs	r7, #0
 8000266:	b11e      	cbz	r6, 8000270 <__udivmoddi4+0xa0>
 8000268:	40d4      	lsrs	r4, r2
 800026a:	2300      	movs	r3, #0
 800026c:	e9c6 4300 	strd	r4, r3, [r6]
 8000270:	4639      	mov	r1, r7
 8000272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000276:	428b      	cmp	r3, r1
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0xbe>
 800027a:	2e00      	cmp	r6, #0
 800027c:	f000 80eb 	beq.w	8000456 <__udivmoddi4+0x286>
 8000280:	2700      	movs	r7, #0
 8000282:	e9c6 0100 	strd	r0, r1, [r6]
 8000286:	4638      	mov	r0, r7
 8000288:	4639      	mov	r1, r7
 800028a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800028e:	fab3 f783 	clz	r7, r3
 8000292:	2f00      	cmp	r7, #0
 8000294:	d147      	bne.n	8000326 <__udivmoddi4+0x156>
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__udivmoddi4+0xd0>
 800029a:	4282      	cmp	r2, r0
 800029c:	f200 80fa 	bhi.w	8000494 <__udivmoddi4+0x2c4>
 80002a0:	1a84      	subs	r4, r0, r2
 80002a2:	eb61 0303 	sbc.w	r3, r1, r3
 80002a6:	2001      	movs	r0, #1
 80002a8:	4698      	mov	r8, r3
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d0e0      	beq.n	8000270 <__udivmoddi4+0xa0>
 80002ae:	e9c6 4800 	strd	r4, r8, [r6]
 80002b2:	e7dd      	b.n	8000270 <__udivmoddi4+0xa0>
 80002b4:	b902      	cbnz	r2, 80002b8 <__udivmoddi4+0xe8>
 80002b6:	deff      	udf	#255	; 0xff
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	2a00      	cmp	r2, #0
 80002be:	f040 808f 	bne.w	80003e0 <__udivmoddi4+0x210>
 80002c2:	1b49      	subs	r1, r1, r5
 80002c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c8:	fa1f f885 	uxth.w	r8, r5
 80002cc:	2701      	movs	r7, #1
 80002ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002dc:	fb08 f10c 	mul.w	r1, r8, ip
 80002e0:	4299      	cmp	r1, r3
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x124>
 80002e4:	18eb      	adds	r3, r5, r3
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x122>
 80002ec:	4299      	cmp	r1, r3
 80002ee:	f200 80cd 	bhi.w	800048c <__udivmoddi4+0x2bc>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1a59      	subs	r1, r3, r1
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000300:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x14c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x14a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80b6 	bhi.w	8000486 <__udivmoddi4+0x2b6>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e79f      	b.n	8000266 <__udivmoddi4+0x96>
 8000326:	f1c7 0c20 	rsb	ip, r7, #32
 800032a:	40bb      	lsls	r3, r7
 800032c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000330:	ea4e 0e03 	orr.w	lr, lr, r3
 8000334:	fa01 f407 	lsl.w	r4, r1, r7
 8000338:	fa20 f50c 	lsr.w	r5, r0, ip
 800033c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000340:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000344:	4325      	orrs	r5, r4
 8000346:	fbb3 f9f8 	udiv	r9, r3, r8
 800034a:	0c2c      	lsrs	r4, r5, #16
 800034c:	fb08 3319 	mls	r3, r8, r9, r3
 8000350:	fa1f fa8e 	uxth.w	sl, lr
 8000354:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000358:	fb09 f40a 	mul.w	r4, r9, sl
 800035c:	429c      	cmp	r4, r3
 800035e:	fa02 f207 	lsl.w	r2, r2, r7
 8000362:	fa00 f107 	lsl.w	r1, r0, r7
 8000366:	d90b      	bls.n	8000380 <__udivmoddi4+0x1b0>
 8000368:	eb1e 0303 	adds.w	r3, lr, r3
 800036c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000370:	f080 8087 	bcs.w	8000482 <__udivmoddi4+0x2b2>
 8000374:	429c      	cmp	r4, r3
 8000376:	f240 8084 	bls.w	8000482 <__udivmoddi4+0x2b2>
 800037a:	f1a9 0902 	sub.w	r9, r9, #2
 800037e:	4473      	add	r3, lr
 8000380:	1b1b      	subs	r3, r3, r4
 8000382:	b2ad      	uxth	r5, r5
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000390:	fb00 fa0a 	mul.w	sl, r0, sl
 8000394:	45a2      	cmp	sl, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x1da>
 8000398:	eb1e 0404 	adds.w	r4, lr, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	d26b      	bcs.n	800047a <__udivmoddi4+0x2aa>
 80003a2:	45a2      	cmp	sl, r4
 80003a4:	d969      	bls.n	800047a <__udivmoddi4+0x2aa>
 80003a6:	3802      	subs	r0, #2
 80003a8:	4474      	add	r4, lr
 80003aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ae:	fba0 8902 	umull	r8, r9, r0, r2
 80003b2:	eba4 040a 	sub.w	r4, r4, sl
 80003b6:	454c      	cmp	r4, r9
 80003b8:	46c2      	mov	sl, r8
 80003ba:	464b      	mov	r3, r9
 80003bc:	d354      	bcc.n	8000468 <__udivmoddi4+0x298>
 80003be:	d051      	beq.n	8000464 <__udivmoddi4+0x294>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d069      	beq.n	8000498 <__udivmoddi4+0x2c8>
 80003c4:	ebb1 050a 	subs.w	r5, r1, sl
 80003c8:	eb64 0403 	sbc.w	r4, r4, r3
 80003cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003d0:	40fd      	lsrs	r5, r7
 80003d2:	40fc      	lsrs	r4, r7
 80003d4:	ea4c 0505 	orr.w	r5, ip, r5
 80003d8:	e9c6 5400 	strd	r5, r4, [r6]
 80003dc:	2700      	movs	r7, #0
 80003de:	e747      	b.n	8000270 <__udivmoddi4+0xa0>
 80003e0:	f1c2 0320 	rsb	r3, r2, #32
 80003e4:	fa20 f703 	lsr.w	r7, r0, r3
 80003e8:	4095      	lsls	r5, r2
 80003ea:	fa01 f002 	lsl.w	r0, r1, r2
 80003ee:	fa21 f303 	lsr.w	r3, r1, r3
 80003f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f6:	4338      	orrs	r0, r7
 80003f8:	0c01      	lsrs	r1, r0, #16
 80003fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80003fe:	fa1f f885 	uxth.w	r8, r5
 8000402:	fb0e 3317 	mls	r3, lr, r7, r3
 8000406:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040a:	fb07 f308 	mul.w	r3, r7, r8
 800040e:	428b      	cmp	r3, r1
 8000410:	fa04 f402 	lsl.w	r4, r4, r2
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x256>
 8000416:	1869      	adds	r1, r5, r1
 8000418:	f107 3cff 	add.w	ip, r7, #4294967295
 800041c:	d22f      	bcs.n	800047e <__udivmoddi4+0x2ae>
 800041e:	428b      	cmp	r3, r1
 8000420:	d92d      	bls.n	800047e <__udivmoddi4+0x2ae>
 8000422:	3f02      	subs	r7, #2
 8000424:	4429      	add	r1, r5
 8000426:	1acb      	subs	r3, r1, r3
 8000428:	b281      	uxth	r1, r0
 800042a:	fbb3 f0fe 	udiv	r0, r3, lr
 800042e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb00 f308 	mul.w	r3, r0, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x27e>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f100 3cff 	add.w	ip, r0, #4294967295
 8000444:	d217      	bcs.n	8000476 <__udivmoddi4+0x2a6>
 8000446:	428b      	cmp	r3, r1
 8000448:	d915      	bls.n	8000476 <__udivmoddi4+0x2a6>
 800044a:	3802      	subs	r0, #2
 800044c:	4429      	add	r1, r5
 800044e:	1ac9      	subs	r1, r1, r3
 8000450:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000454:	e73b      	b.n	80002ce <__udivmoddi4+0xfe>
 8000456:	4637      	mov	r7, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e709      	b.n	8000270 <__udivmoddi4+0xa0>
 800045c:	4607      	mov	r7, r0
 800045e:	e6e7      	b.n	8000230 <__udivmoddi4+0x60>
 8000460:	4618      	mov	r0, r3
 8000462:	e6fb      	b.n	800025c <__udivmoddi4+0x8c>
 8000464:	4541      	cmp	r1, r8
 8000466:	d2ab      	bcs.n	80003c0 <__udivmoddi4+0x1f0>
 8000468:	ebb8 0a02 	subs.w	sl, r8, r2
 800046c:	eb69 020e 	sbc.w	r2, r9, lr
 8000470:	3801      	subs	r0, #1
 8000472:	4613      	mov	r3, r2
 8000474:	e7a4      	b.n	80003c0 <__udivmoddi4+0x1f0>
 8000476:	4660      	mov	r0, ip
 8000478:	e7e9      	b.n	800044e <__udivmoddi4+0x27e>
 800047a:	4618      	mov	r0, r3
 800047c:	e795      	b.n	80003aa <__udivmoddi4+0x1da>
 800047e:	4667      	mov	r7, ip
 8000480:	e7d1      	b.n	8000426 <__udivmoddi4+0x256>
 8000482:	4681      	mov	r9, r0
 8000484:	e77c      	b.n	8000380 <__udivmoddi4+0x1b0>
 8000486:	3802      	subs	r0, #2
 8000488:	442c      	add	r4, r5
 800048a:	e747      	b.n	800031c <__udivmoddi4+0x14c>
 800048c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000490:	442b      	add	r3, r5
 8000492:	e72f      	b.n	80002f4 <__udivmoddi4+0x124>
 8000494:	4638      	mov	r0, r7
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xda>
 8000498:	4637      	mov	r7, r6
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0xa0>

0800049c <__aeabi_idiv0>:
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004b0:	f023 0218 	bic.w	r2, r3, #24
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f0:	68fb      	ldr	r3, [r7, #12]
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8000504:	f000 fcfc 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f912 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa38 	bl	8000980 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f9ba 	bl	8000888 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000514:	f000 fa0c 	bl	8000930 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  debugPrintln(&huart1, "-------------------Funcionamento----------------------");
 8000518:	496f      	ldr	r1, [pc, #444]	; (80006d8 <main+0x1d8>)
 800051a:	4870      	ldr	r0, [pc, #448]	; (80006dc <main+0x1dc>)
 800051c:	f000 fabc 	bl	8000a98 <debugPrintln>
  debugPrintln(&huart1, "");
 8000520:	496f      	ldr	r1, [pc, #444]	; (80006e0 <main+0x1e0>)
 8000522:	486e      	ldr	r0, [pc, #440]	; (80006dc <main+0x1dc>)
 8000524:	f000 fab8 	bl	8000a98 <debugPrintln>
  debugPrintln(&huart1, "Durante o funcionamento, para saber o valor o estado atual das saidas, aperte 0");
 8000528:	496e      	ldr	r1, [pc, #440]	; (80006e4 <main+0x1e4>)
 800052a:	486c      	ldr	r0, [pc, #432]	; (80006dc <main+0x1dc>)
 800052c:	f000 fab4 	bl	8000a98 <debugPrintln>
  while (1)
  {
	  /* Condição que ativa o alarme */
	  if(HAL_GPIO_ReadPin(GPIOA, Magnetic_Sensor_Pin))
 8000530:	2104      	movs	r1, #4
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f000 ffbd 	bl	80014b4 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d012      	beq.n	8000566 <main+0x66>
	  {   aux = 2;
 8000540:	4b69      	ldr	r3, [pc, #420]	; (80006e8 <main+0x1e8>)
 8000542:	2202      	movs	r2, #2
 8000544:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2102      	movs	r1, #2
 800054a:	4868      	ldr	r0, [pc, #416]	; (80006ec <main+0x1ec>)
 800054c:	f000 ffca 	bl	80014e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2120      	movs	r1, #32
 8000554:	4865      	ldr	r0, [pc, #404]	; (80006ec <main+0x1ec>)
 8000556:	f000 ffc5 	bl	80014e4 <HAL_GPIO_WritePin>
		  timer_1 = HAL_GetTick();
 800055a:	f000 fd3f 	bl	8000fdc <HAL_GetTick>
 800055e:	4602      	mov	r2, r0
 8000560:	4b63      	ldr	r3, [pc, #396]	; (80006f0 <main+0x1f0>)
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	e034      	b.n	80005d0 <main+0xd0>
	  }
	  /* Verifica se a porta foi fechada */
	  else if(!HAL_GPIO_ReadPin(GPIOA, Magnetic_Sensor_Pin) && (aux == 2))
 8000566:	2104      	movs	r1, #4
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 ffa2 	bl	80014b4 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d11f      	bne.n	80005b6 <main+0xb6>
 8000576:	4b5c      	ldr	r3, [pc, #368]	; (80006e8 <main+0x1e8>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d11b      	bne.n	80005b6 <main+0xb6>
	  {
		  aux = 1;
 800057e:	4b5a      	ldr	r3, [pc, #360]	; (80006e8 <main+0x1e8>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2102      	movs	r1, #2
 8000588:	4858      	ldr	r0, [pc, #352]	; (80006ec <main+0x1ec>)
 800058a:	f000 ffab 	bl	80014e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2101      	movs	r1, #1
 8000592:	4856      	ldr	r0, [pc, #344]	; (80006ec <main+0x1ec>)
 8000594:	f000 ffa6 	bl	80014e4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4853      	ldr	r0, [pc, #332]	; (80006ec <main+0x1ec>)
 800059e:	f000 ffa1 	bl	80014e4 <HAL_GPIO_WritePin>
		  debugPrintln(&huart1, "Porta fechada");
 80005a2:	4954      	ldr	r1, [pc, #336]	; (80006f4 <main+0x1f4>)
 80005a4:	484d      	ldr	r0, [pc, #308]	; (80006dc <main+0x1dc>)
 80005a6:	f000 fa77 	bl	8000a98 <debugPrintln>
		  timer_2 = HAL_GetTick();
 80005aa:	f000 fd17 	bl	8000fdc <HAL_GetTick>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b51      	ldr	r3, [pc, #324]	; (80006f8 <main+0x1f8>)
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	e00c      	b.n	80005d0 <main+0xd0>
	   }
	  else if ((HAL_GetTick() - timer_2) >= 5000){
 80005b6:	f000 fd11 	bl	8000fdc <HAL_GetTick>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b4e      	ldr	r3, [pc, #312]	; (80006f8 <main+0x1f8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d902      	bls.n	80005d0 <main+0xd0>
		  aux = 0;
 80005ca:	4b47      	ldr	r3, [pc, #284]	; (80006e8 <main+0x1e8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_UART_Receive(&huart1, (uint8_t *)in, 1, 1000);
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	2201      	movs	r2, #1
 80005d6:	4949      	ldr	r1, [pc, #292]	; (80006fc <main+0x1fc>)
 80005d8:	4840      	ldr	r0, [pc, #256]	; (80006dc <main+0x1dc>)
 80005da:	f002 ffa3 	bl	8003524 <HAL_UART_Receive>
	  if (!strcmp(&in[0],"0")){
 80005de:	4948      	ldr	r1, [pc, #288]	; (8000700 <main+0x200>)
 80005e0:	4846      	ldr	r0, [pc, #280]	; (80006fc <main+0x1fc>)
 80005e2:	f7ff fdcb 	bl	800017c <strcmp>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <main+0x18a>
		  debugPrintln(&huart1,"------------------------------------");
 80005ec:	4945      	ldr	r1, [pc, #276]	; (8000704 <main+0x204>)
 80005ee:	483b      	ldr	r0, [pc, #236]	; (80006dc <main+0x1dc>)
 80005f0:	f000 fa52 	bl	8000a98 <debugPrintln>
		  /* Verifica se sensor magnético está ativado */
		  if(HAL_GPIO_ReadPin(GPIOA, Magnetic_Sensor_Pin))
 80005f4:	2104      	movs	r1, #4
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 ff5b 	bl	80014b4 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d004      	beq.n	800060e <main+0x10e>
			  debugPrintln(&huart1,"Porta aberta");
 8000604:	4940      	ldr	r1, [pc, #256]	; (8000708 <main+0x208>)
 8000606:	4835      	ldr	r0, [pc, #212]	; (80006dc <main+0x1dc>)
 8000608:	f000 fa46 	bl	8000a98 <debugPrintln>
 800060c:	e003      	b.n	8000616 <main+0x116>
		  else
			  debugPrintln(&huart1,"Porta Fechada");
 800060e:	493f      	ldr	r1, [pc, #252]	; (800070c <main+0x20c>)
 8000610:	4832      	ldr	r0, [pc, #200]	; (80006dc <main+0x1dc>)
 8000612:	f000 fa41 	bl	8000a98 <debugPrintln>
		  /* Verifica se o LED vermelho está ligado */
		  if(HAL_GPIO_ReadPin(GPIOC,State_LEDVm_Pin))
 8000616:	2140      	movs	r1, #64	; 0x40
 8000618:	483d      	ldr	r0, [pc, #244]	; (8000710 <main+0x210>)
 800061a:	f000 ff4b 	bl	80014b4 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d004      	beq.n	800062e <main+0x12e>
			  debugPrintln(&huart1,"Led vermelho ligado");
 8000624:	493b      	ldr	r1, [pc, #236]	; (8000714 <main+0x214>)
 8000626:	482d      	ldr	r0, [pc, #180]	; (80006dc <main+0x1dc>)
 8000628:	f000 fa36 	bl	8000a98 <debugPrintln>
 800062c:	e003      	b.n	8000636 <main+0x136>
		  else
			  debugPrintln(&huart1,"Led vermelho Desligado");
 800062e:	493a      	ldr	r1, [pc, #232]	; (8000718 <main+0x218>)
 8000630:	482a      	ldr	r0, [pc, #168]	; (80006dc <main+0x1dc>)
 8000632:	f000 fa31 	bl	8000a98 <debugPrintln>
		  /* Verifica se o LED verde está ligado */
		  if(HAL_GPIO_ReadPin(GPIOA,State_LEDVd_Pin))
 8000636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063e:	f000 ff39 	bl	80014b4 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d004      	beq.n	8000652 <main+0x152>
			  debugPrintln(&huart1,"Led verde ligado");
 8000648:	4934      	ldr	r1, [pc, #208]	; (800071c <main+0x21c>)
 800064a:	4824      	ldr	r0, [pc, #144]	; (80006dc <main+0x1dc>)
 800064c:	f000 fa24 	bl	8000a98 <debugPrintln>
 8000650:	e003      	b.n	800065a <main+0x15a>
		  else
			  debugPrintln(&huart1,"Led verde desligado");
 8000652:	4933      	ldr	r1, [pc, #204]	; (8000720 <main+0x220>)
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <main+0x1dc>)
 8000656:	f000 fa1f 	bl	8000a98 <debugPrintln>
		  /* Verifica se o Buzzer está ativado */
		  if(HAL_GPIO_ReadPin(GPIOC,State_Buzzer_Pin))
 800065a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065e:	482c      	ldr	r0, [pc, #176]	; (8000710 <main+0x210>)
 8000660:	f000 ff28 	bl	80014b4 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d004      	beq.n	8000674 <main+0x174>
			  debugPrintln(&huart1,"Buzzer ligado");
 800066a:	492e      	ldr	r1, [pc, #184]	; (8000724 <main+0x224>)
 800066c:	481b      	ldr	r0, [pc, #108]	; (80006dc <main+0x1dc>)
 800066e:	f000 fa13 	bl	8000a98 <debugPrintln>
 8000672:	e003      	b.n	800067c <main+0x17c>
		  else
			  debugPrintln(&huart1,"Buzzer Desligado");
 8000674:	492c      	ldr	r1, [pc, #176]	; (8000728 <main+0x228>)
 8000676:	4819      	ldr	r0, [pc, #100]	; (80006dc <main+0x1dc>)
 8000678:	f000 fa0e 	bl	8000a98 <debugPrintln>
		  debugPrintln(&huart1,"------------------------------------");
 800067c:	4921      	ldr	r1, [pc, #132]	; (8000704 <main+0x204>)
 800067e:	4817      	ldr	r0, [pc, #92]	; (80006dc <main+0x1dc>)
 8000680:	f000 fa0a 	bl	8000a98 <debugPrintln>
		  in[0] = 1;
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <main+0x1fc>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
//			  debugPrintln(&huart1,"------------------------------------");
//			  in[0]= 1;
		  }


	  if(((HAL_GetTick() - timer_1) >= 1000) && (HAL_GPIO_ReadPin(GPIOA, Magnetic_Sensor_Pin))){
 800068a:	f000 fca7 	bl	8000fdc <HAL_GetTick>
 800068e:	4602      	mov	r2, r0
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <main+0x1f0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800069a:	d30b      	bcc.n	80006b4 <main+0x1b4>
 800069c:	2104      	movs	r1, #4
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f000 ff07 	bl	80014b4 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d003      	beq.n	80006b4 <main+0x1b4>
		  debugPrintln(&huart1, "Ocorreu uma violacao, porta aberta");
 80006ac:	491f      	ldr	r1, [pc, #124]	; (800072c <main+0x22c>)
 80006ae:	480b      	ldr	r0, [pc, #44]	; (80006dc <main+0x1dc>)
 80006b0:	f000 f9f2 	bl	8000a98 <debugPrintln>
	  }
	  if((HAL_GetTick() - timer_2) >= 5000){
 80006b4:	f000 fc92 	bl	8000fdc <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <main+0x1f8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	f241 3287 	movw	r2, #4999	; 0x1387
 80006c4:	4293      	cmp	r3, r2
 80006c6:	f67f af33 	bls.w	8000530 <main+0x30>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <main+0x1ec>)
 80006d0:	f000 ff08 	bl	80014e4 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOA, Magnetic_Sensor_Pin))
 80006d4:	e72c      	b.n	8000530 <main+0x30>
 80006d6:	bf00      	nop
 80006d8:	08004110 	.word	0x08004110
 80006dc:	2000003c 	.word	0x2000003c
 80006e0:	08004148 	.word	0x08004148
 80006e4:	0800414c 	.word	0x0800414c
 80006e8:	2000002c 	.word	0x2000002c
 80006ec:	48000400 	.word	0x48000400
 80006f0:	20000038 	.word	0x20000038
 80006f4:	0800419c 	.word	0x0800419c
 80006f8:	20000034 	.word	0x20000034
 80006fc:	20000030 	.word	0x20000030
 8000700:	080041ac 	.word	0x080041ac
 8000704:	080041b0 	.word	0x080041b0
 8000708:	080041d8 	.word	0x080041d8
 800070c:	080041e8 	.word	0x080041e8
 8000710:	48000800 	.word	0x48000800
 8000714:	080041f8 	.word	0x080041f8
 8000718:	0800420c 	.word	0x0800420c
 800071c:	08004224 	.word	0x08004224
 8000720:	08004238 	.word	0x08004238
 8000724:	0800424c 	.word	0x0800424c
 8000728:	0800425c 	.word	0x0800425c
 800072c:	08004270 	.word	0x08004270

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0ae      	sub	sp, #184	; 0xb8
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800073a:	2248      	movs	r2, #72	; 0x48
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fcd2 	bl	80040e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2250      	movs	r2, #80	; 0x50
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fcc2 	bl	80040e8 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800076e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000772:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	f023 0303 	bic.w	r3, r3, #3
 800077e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000788:	f000 ffaa 	bl	80016e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fe87 	bl	80004a0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000792:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <SystemClock_Config+0x154>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800079a:	4a3a      	ldr	r2, [pc, #232]	; (8000884 <SystemClock_Config+0x154>)
 800079c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <SystemClock_Config+0x154>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007ae:	2327      	movs	r3, #39	; 0x27
 80007b0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fb2d 	bl	8001e44 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f0:	f000 f96f 	bl	8000ad2 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007f4:	236f      	movs	r3, #111	; 0x6f
 80007f6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007f8:	2302      	movs	r3, #2
 80007fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000810:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fea8 	bl	800256c <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000822:	f000 f956 	bl	8000ad2 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000826:	f242 1307 	movw	r3, #8455	; 0x2107
 800082a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800082c:	2318      	movs	r3, #24
 800082e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000834:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800083a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800083c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000840:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000846:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000850:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000856:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800085c:	2300      	movs	r3, #0
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000860:	2300      	movs	r3, #0
 8000862:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f002 faca 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x146>
  {
    Error_Handler();
 8000872:	f000 f92e 	bl	8000ad2 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000876:	f002 fc38 	bl	80030ea <HAL_RCCEx_EnableMSIPLLMode>
}
 800087a:	bf00      	nop
 800087c:	37b8      	adds	r7, #184	; 0xb8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	58000400 	.word	0x58000400

08000888 <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 800088e:	4a27      	ldr	r2, [pc, #156]	; (800092c <MX_USART1_UART_Init+0xa4>)
 8000890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008cc:	2230      	movs	r2, #48	; 0x30
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008de:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008e2:	f002 fd39 	bl	8003358 <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80008ec:	f000 f8f1 	bl	8000ad2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 80008f4:	f003 fa97 	bl	8003e26 <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008fe:	f000 f8e8 	bl	8000ad2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 8000906:	f003 facc 	bl	8003ea2 <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f8df 	bl	8000ad2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_USART1_UART_Init+0xa0>)
 8000916:	f003 fa4d 	bl	8003db4 <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x9c>
  {
    Error_Handler();
 8000920:	f000 f8d7 	bl	8000ad2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000003c 	.word	0x2000003c
 800092c:	40013800 	.word	0x40013800

08000930 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USB_PCD_Init+0x48>)
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <MX_USB_PCD_Init+0x4c>)
 8000938:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USB_PCD_Init+0x48>)
 800093c:	2208      	movs	r2, #8
 800093e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_USB_PCD_Init+0x48>)
 8000942:	2202      	movs	r2, #2
 8000944:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USB_PCD_Init+0x48>)
 8000948:	2202      	movs	r2, #2
 800094a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_USB_PCD_Init+0x48>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USB_PCD_Init+0x48>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_USB_PCD_Init+0x48>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USB_PCD_Init+0x48>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_USB_PCD_Init+0x48>)
 8000966:	f000 fdd5 	bl	8001514 <HAL_PCD_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000970:	f000 f8af 	bl	8000ad2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000c8 	.word	0x200000c8
 800097c:	40006800 	.word	0x40006800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000994:	2004      	movs	r0, #4
 8000996:	f7ff fd99 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff fd96 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff fd93 	bl	80004cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2008      	movs	r0, #8
 80009a8:	f7ff fd90 	bl	80004cc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2108      	movs	r1, #8
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f000 fd96 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2123      	movs	r1, #35	; 0x23
 80009bc:	4833      	ldr	r0, [pc, #204]	; (8000a8c <MX_GPIO_Init+0x10c>)
 80009be:	f000 fd91 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Magnetic_Sensor_Pin */
  GPIO_InitStruct.Pin = Magnetic_Sensor_Pin;
 80009c2:	2304      	movs	r3, #4
 80009c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Magnetic_Sensor_GPIO_Port, &GPIO_InitStruct);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d6:	f000 fbfd 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80009da:	2308      	movs	r3, #8
 80009dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f000 fbef 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f6:	2310      	movs	r3, #16
 80009f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4822      	ldr	r0, [pc, #136]	; (8000a90 <MX_GPIO_Init+0x110>)
 8000a08:	f000 fbe4 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a0c:	2323      	movs	r3, #35	; 0x23
 8000a0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481a      	ldr	r0, [pc, #104]	; (8000a8c <MX_GPIO_Init+0x10c>)
 8000a22:	f000 fbd7 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : State_LEDVm_Pin */
  GPIO_InitStruct.Pin = State_LEDVm_Pin;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(State_LEDVm_GPIO_Port, &GPIO_InitStruct);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_GPIO_Init+0x110>)
 8000a38:	f000 fbcc 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : State_LEDVd_Pin */
  GPIO_InitStruct.Pin = State_LEDVd_Pin;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(State_LEDVd_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 fbbf 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : State_Buzzer_Pin */
  GPIO_InitStruct.Pin = State_Buzzer_Pin;
 8000a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a60:	2302      	movs	r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(State_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <MX_GPIO_Init+0x110>)
 8000a6a:	f000 fbb3 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_GPIO_Init+0x114>)
 8000a80:	f000 fba8 	bl	80011d4 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	48000800 	.word	0x48000800
 8000a94:	48000c00 	.word	0x48000c00

08000a98 <debugPrintln>:
  * @param  None
  * @retval None
  */

void debugPrintln(UART_HandleTypeDef *huart, char _out[])
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000aa2:	6838      	ldr	r0, [r7, #0]
 8000aa4:	f7ff fb74 	bl	8000190 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	230a      	movs	r3, #10
 8000aae:	6839      	ldr	r1, [r7, #0]
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f002 fca1 	bl	80033f8 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8000ab6:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000aba:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000abc:	f107 010c 	add.w	r1, r7, #12
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f002 fc97 	bl	80033f8 <HAL_UART_Transmit>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_AHB2_GRP1_EnableClock>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b04:	68fb      	ldr	r3, [r7, #12]
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b085      	sub	sp, #20
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4013      	ands	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b68:	68fb      	ldr	r3, [r7, #12]
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_UART_MspInit+0x58>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d116      	bne.n	8000bd4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000baa:	f7ff ffcb 	bl	8000b44 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff ff96 	bl	8000ae0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bb4:	23c0      	movs	r3, #192	; 0xc0
 8000bb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <HAL_UART_MspInit+0x5c>)
 8000bd0:	f000 fb00 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	48000400 	.word	0x48000400

08000be4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_PCD_MspInit+0x5c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d118      	bne.n	8000c38 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff ff6a 	bl	8000ae0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f000 fad2 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c30:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c34:	f7ff ff6d 	bl	8000b12 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40006800 	.word	0x40006800

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f98c 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <SystemInit+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <SystemInit+0xa0>)
 8000cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb0:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <SystemInit+0xa0>)
 8000cb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000cd2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <SystemInit+0xa4>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cf0:	f023 0305 	bic.w	r3, r3, #5
 8000cf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d04:	f023 0301 	bic.w	r3, r3, #1
 8000d08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <SystemInit+0xa8>)
 8000d12:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <SystemInit+0xa8>)
 8000d1a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	faf6fefb 	.word	0xfaf6fefb
 8000d48:	22041000 	.word	0x22041000

08000d4c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	4a47      	ldr	r2, [pc, #284]	; (8000e7c <SystemCoreClockUpdate+0x130>)
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	d867      	bhi.n	8000e44 <SystemCoreClockUpdate+0xf8>
 8000d74:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <SystemCoreClockUpdate+0x30>)
 8000d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7a:	bf00      	nop
 8000d7c:	08000db1 	.word	0x08000db1
 8000d80:	08000e45 	.word	0x08000e45
 8000d84:	08000e45 	.word	0x08000e45
 8000d88:	08000e45 	.word	0x08000e45
 8000d8c:	08000db9 	.word	0x08000db9
 8000d90:	08000e45 	.word	0x08000e45
 8000d94:	08000e45 	.word	0x08000e45
 8000d98:	08000e45 	.word	0x08000e45
 8000d9c:	08000dc1 	.word	0x08000dc1
 8000da0:	08000e45 	.word	0x08000e45
 8000da4:	08000e45 	.word	0x08000e45
 8000da8:	08000e45 	.word	0x08000e45
 8000dac:	08000dc9 	.word	0x08000dc9
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000db0:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <SystemCoreClockUpdate+0x134>)
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	6013      	str	r3, [r2, #0]
      break;
 8000db6:	e049      	b.n	8000e4c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000db8:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <SystemCoreClockUpdate+0x134>)
 8000dba:	4a32      	ldr	r2, [pc, #200]	; (8000e84 <SystemCoreClockUpdate+0x138>)
 8000dbc:	601a      	str	r2, [r3, #0]
      break;
 8000dbe:	e045      	b.n	8000e4c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <SystemCoreClockUpdate+0x134>)
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <SystemCoreClockUpdate+0x13c>)
 8000dc4:	601a      	str	r2, [r3, #0]
      break;
 8000dc6:	e041      	b.n	8000e4c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	3301      	adds	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d105      	bne.n	8000df6 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000dea:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <SystemCoreClockUpdate+0x138>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e00d      	b.n	8000e12 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d105      	bne.n	8000e08 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000dfc:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <SystemCoreClockUpdate+0x13c>)
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e004      	b.n	8000e12 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0f5b      	lsrs	r3, r3, #29
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	3301      	adds	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <SystemCoreClockUpdate+0x134>)
 8000e40:	6013      	str	r3, [r2, #0]
      break;
 8000e42:	e003      	b.n	8000e4c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <SystemCoreClockUpdate+0x134>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	6013      	str	r3, [r2, #0]
      break;
 8000e4a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <SystemCoreClockUpdate+0x140>)
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <SystemCoreClockUpdate+0x134>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemCoreClockUpdate+0x134>)
 8000e6c:	6013      	str	r3, [r2, #0]

}
 8000e6e:	bf00      	nop
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	08004330 	.word	0x08004330
 8000e80:	20000004 	.word	0x20000004
 8000e84:	00f42400 	.word	0x00f42400
 8000e88:	01e84800 	.word	0x01e84800
 8000e8c:	080042d0 	.word	0x080042d0

08000e90 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e90:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e92:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e94:	3304      	adds	r3, #4

08000e96 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e96:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e98:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e9a:	d3f9      	bcc.n	8000e90 <CopyDataInit>
  bx lr
 8000e9c:	4770      	bx	lr

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000e9e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ea0:	3004      	adds	r0, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ea2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>
  bx lr
 8000ea6:	4770      	bx	lr

08000ea8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000eaa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eac:	f7ff fef8 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <LoopForever+0x8>)
 8000eb2:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <LoopForever+0xc>)
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <LoopForever+0x10>)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f7ff ffed 	bl	8000e96 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <LoopForever+0x14>)
 8000ebe:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <LoopForever+0x18>)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f7ff ffee 	bl	8000ea2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <LoopForever+0x1c>)
 8000ec8:	490b      	ldr	r1, [pc, #44]	; (8000ef8 <LoopForever+0x20>)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f7ff ffe9 	bl	8000ea2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed0:	f003 f8e6 	bl	80040a0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ed4:	f7ff fb14 	bl	8000500 <main>

08000ed8 <LoopForever>:

LoopForever:
  b LoopForever
 8000ed8:	e7fe      	b.n	8000ed8 <LoopForever>
 8000eda:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000edc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	08004398 	.word	0x08004398
  INIT_BSS _sbss, _ebss
 8000eec:	20000010 	.word	0x20000010
 8000ef0:	20000340 	.word	0x20000340
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ef4:	20030000 	.word	0x20030000
 8000ef8:	20030000 	.word	0x20030000

08000efc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_Init+0x3c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_Init+0x3c>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f000 f92a 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 f80f 	bl	8000f40 <HAL_InitTick>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e001      	b.n	8000f32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f2e:	f7ff fe22 	bl	8000b76 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58004000 	.word	0x58004000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_InitTick+0x6c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d024      	beq.n	8000f9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f54:	f001 fcb0 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_InitTick+0x6c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f924 	bl	80011ba <HAL_SYSTICK_Config>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10f      	bne.n	8000f98 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	d809      	bhi.n	8000f92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
 8000f86:	f000 f8fe 	bl	8001186 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <HAL_InitTick+0x70>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e007      	b.n	8000fa2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e004      	b.n	8000fa2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e001      	b.n	8000fa2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	2000000c 	.word	0x2000000c
 8000fd8:	2000033c 	.word	0x2000033c

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2000033c 	.word	0x2000033c

08000ff4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTickPrio+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff47 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff5e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffb2 	bl	800112c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	e14c      	b.n	800147e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 813e 	beq.w	8001478 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d00b      	beq.n	800121c <HAL_GPIO_Init+0x48>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d007      	beq.n	800121c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001210:	2b11      	cmp	r3, #17
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b12      	cmp	r3, #18
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 0201 	and.w	r2, r3, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0xea>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	6939      	ldr	r1, [r7, #16]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8098 	beq.w	8001478 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001348:	4a54      	ldr	r2, [pc, #336]	; (800149c <HAL_GPIO_Init+0x2c8>)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001372:	d019      	beq.n	80013a8 <HAL_GPIO_Init+0x1d4>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a4a      	ldr	r2, [pc, #296]	; (80014a0 <HAL_GPIO_Init+0x2cc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d013      	beq.n	80013a4 <HAL_GPIO_Init+0x1d0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a49      	ldr	r2, [pc, #292]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d00d      	beq.n	80013a0 <HAL_GPIO_Init+0x1cc>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <HAL_GPIO_Init+0x2d4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d007      	beq.n	800139c <HAL_GPIO_Init+0x1c8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_GPIO_Init+0x2d8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_GPIO_Init+0x1c4>
 8001394:	2304      	movs	r3, #4
 8001396:	e008      	b.n	80013aa <HAL_GPIO_Init+0x1d6>
 8001398:	2307      	movs	r3, #7
 800139a:	e006      	b.n	80013aa <HAL_GPIO_Init+0x1d6>
 800139c:	2303      	movs	r3, #3
 800139e:	e004      	b.n	80013aa <HAL_GPIO_Init+0x1d6>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0x1d6>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <HAL_GPIO_Init+0x1d6>
 80013a8:	2300      	movs	r3, #0
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	f002 0203 	and.w	r2, r2, #3
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	4093      	lsls	r3, r2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ba:	4938      	ldr	r1, [pc, #224]	; (800149c <HAL_GPIO_Init+0x2c8>)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 80013ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ee:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 80013f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	f47f aeab 	bne.w	80011e4 <HAL_GPIO_Init+0x10>
  }
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40010000 	.word	0x40010000
 80014a0:	48000400 	.word	0x48000400
 80014a4:	48000800 	.word	0x48000800
 80014a8:	48000c00 	.word	0x48000c00
 80014ac:	48001000 	.word	0x48001000
 80014b0:	58000800 	.word	0x58000800

080014b4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001500:	e002      	b.n	8001508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	b08b      	sub	sp, #44	; 0x2c
 8001518:	af06      	add	r7, sp, #24
 800151a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0ad      	b.n	8001682 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fb52 	bl	8000be4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fd68 	bl	8004022 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e035      	b.n	80015c4 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	015b      	lsls	r3, r3, #5
 800155e:	4413      	add	r3, r2
 8001560:	3329      	adds	r3, #41	; 0x29
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	015b      	lsls	r3, r3, #5
 800156c:	4413      	add	r3, r2
 800156e:	3328      	adds	r3, #40	; 0x28
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	b291      	uxth	r1, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	015b      	lsls	r3, r3, #5
 800157e:	4413      	add	r3, r2
 8001580:	3336      	adds	r3, #54	; 0x36
 8001582:	460a      	mov	r2, r1
 8001584:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	4413      	add	r3, r2
 800158e:	332b      	adds	r3, #43	; 0x2b
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	015b      	lsls	r3, r3, #5
 800159a:	4413      	add	r3, r2
 800159c:	3338      	adds	r3, #56	; 0x38
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	015b      	lsls	r3, r3, #5
 80015a8:	4413      	add	r3, r2
 80015aa:	333c      	adds	r3, #60	; 0x3c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	3302      	adds	r3, #2
 80015b6:	015b      	lsls	r3, r3, #5
 80015b8:	4413      	add	r3, r2
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3301      	adds	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d3c4      	bcc.n	8001558 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e031      	b.n	8001638 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	015b      	lsls	r3, r3, #5
 80015da:	4413      	add	r3, r2
 80015dc:	f203 1329 	addw	r3, r3, #297	; 0x129
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	015b      	lsls	r3, r3, #5
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	015b      	lsls	r3, r3, #5
 80015fa:	4413      	add	r3, r2
 80015fc:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	015b      	lsls	r3, r3, #5
 800160a:	4413      	add	r3, r2
 800160c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	4413      	add	r3, r2
 800161c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	330a      	adds	r3, #10
 800162a:	015b      	lsls	r3, r3, #5
 800162c:	4413      	add	r3, r2
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	3301      	adds	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	d3c8      	bcc.n	80015d4 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	687e      	ldr	r6, [r7, #4]
 800164a:	466d      	mov	r5, sp
 800164c:	f106 0410 	add.w	r4, r6, #16
 8001650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	602b      	str	r3, [r5, #0]
 8001658:	1d33      	adds	r3, r6, #4
 800165a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165c:	6838      	ldr	r0, [r7, #0]
 800165e:	f002 fcfb 	bl	8004058 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f805 	bl	800168a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800168a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	58000400 	.word	0x58000400

08001700 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <HAL_PWREx_GetVoltageRange+0x18>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	58000400 	.word	0x58000400

0800171c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800172e:	d101      	bne.n	8001734 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_RCC_HSE_EnableBypass>:
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800174e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_RCC_HSE_DisableBypass>:
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800176c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001770:	6013      	str	r3, [r2, #0]
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_RCC_HSE_Enable>:
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_RCC_HSE_Disable>:
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800179e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_RCC_HSE_IsReady>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017ca:	d101      	bne.n	80017d0 <LL_RCC_HSE_IsReady+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_RCC_HSE_IsReady+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_RCC_HSI_Enable>:
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_RCC_HSI_Disable>:
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_RCC_HSI_IsReady>:
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182a:	d101      	bne.n	8001830 <LL_RCC_HSI_IsReady+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_RCC_HSI_IsReady+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_RCC_HSI_SetCalibTrimming>:
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_RCC_HSI48_Enable>:
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_RCC_HSI48_Disable>:
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_HSI48_IsReady>:
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d101      	bne.n	80018c2 <LL_RCC_HSI48_IsReady+0x18>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <LL_RCC_HSI48_IsReady+0x1a>
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_RCC_LSE_Enable>:
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_RCC_LSE_Disable>:
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_RCC_LSE_EnableBypass>:
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_RCC_LSE_DisableBypass>:
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d101      	bne.n	800196e <LL_RCC_LSE_IsReady+0x18>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_RCC_LSE_IsReady+0x1a>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d101      	bne.n	80019d6 <LL_RCC_LSI1_IsReady+0x18>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <LL_RCC_LSI1_IsReady+0x1a>
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d101      	bne.n	8001a3e <LL_RCC_LSI2_IsReady+0x18>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <LL_RCC_LSI2_IsReady+0x1a>
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a66:	4313      	orrs	r3, r2
 8001a68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d101      	bne.n	8001aca <LL_RCC_MSI_IsReady+0x16>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_RCC_MSI_IsReady+0x18>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b0e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2bb0      	cmp	r3, #176	; 0xb0
 8001b14:	d901      	bls.n	8001b1a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001b16:	23b0      	movs	r3, #176	; 0xb0
 8001b18:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001b1a:	687b      	ldr	r3, [r7, #4]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 0203 	bic.w	r2, r3, #3
 8001b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bf6:	f023 020f 	bic.w	r2, r3, #15
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf8:	6013      	str	r3, [r2, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d16:	d101      	bne.n	8001d1c <LL_RCC_PLL_IsReady+0x18>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <LL_RCC_PLL_IsReady+0x1a>
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d101      	bne.n	8001da2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dc2:	d101      	bne.n	8001dc8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d101      	bne.n	8001dee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e0c:	d101      	bne.n	8001e12 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e30:	d101      	bne.n	8001e36 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b08d      	sub	sp, #52	; 0x34
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e386      	b.n	8002564 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 808f 	beq.w	8001f82 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e64:	f7ff fe89 	bl	8001b7a <LL_RCC_GetSysClkSource>
 8001e68:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e6a:	f7ff ff82 	bl	8001d72 <LL_RCC_PLL_GetMainSource>
 8001e6e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3e>
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d149      	bne.n	8001f10 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d146      	bne.n	8001f10 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e82:	f7ff fe17 	bl	8001ab4 <LL_RCC_MSI_IsReady>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x54>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e365      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e9c:	f7ff fe2f 	bl	8001afe <LL_RCC_MSI_GetRange>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	429c      	cmp	r4, r3
 8001ea4:	d914      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fd44 	bl	8002938 <RCC_SetFlashLatencyFromMSIRange>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e354      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fe09 	bl	8001ad6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fe2d 	bl	8001b28 <LL_RCC_MSI_SetCalibTrimming>
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fdfe 	bl	8001ad6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fe22 	bl	8001b28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fd25 	bl	8002938 <RCC_SetFlashLatencyFromMSIRange>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e335      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8001ef8:	f7fe ff28 	bl	8000d4c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001efc:	4bb4      	ldr	r3, [pc, #720]	; (80021d0 <HAL_RCC_OscConfig+0x38c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff f81d 	bl	8000f40 <HAL_InitTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d039      	beq.n	8001f80 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e329      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01e      	beq.n	8001f56 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f18:	f7ff fdae 	bl	8001a78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f85e 	bl	8000fdc <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f24:	f7ff f85a 	bl	8000fdc <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e316      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f36:	f7ff fdbd 	bl	8001ab4 <LL_RCC_MSI_IsReady>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f1      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fdc6 	bl	8001ad6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fdea 	bl	8001b28 <LL_RCC_MSI_SetCalibTrimming>
 8001f54:	e015      	b.n	8001f82 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f56:	f7ff fd9e 	bl	8001a96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f83f 	bl	8000fdc <HAL_GetTick>
 8001f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f62:	f7ff f83b 	bl	8000fdc <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e2f7      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f74:	f7ff fd9e 	bl	8001ab4 <LL_RCC_MSI_IsReady>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f1      	bne.n	8001f62 <HAL_RCC_OscConfig+0x11e>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d05a      	beq.n	8002044 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8e:	f7ff fdf4 	bl	8001b7a <LL_RCC_GetSysClkSource>
 8001f92:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f94:	f7ff feed 	bl	8001d72 <LL_RCC_PLL_GetMainSource>
 8001f98:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_OscConfig+0x168>
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d10a      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	f7ff fc04 	bl	80017b8 <LL_RCC_HSE_IsReady>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d045      	beq.n	8002042 <HAL_RCC_OscConfig+0x1fe>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d141      	bne.n	8002042 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e2d0      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x18e>
 8001fcc:	f7ff fbd6 	bl	800177c <LL_RCC_HSE_Enable>
 8001fd0:	e00d      	b.n	8001fee <HAL_RCC_OscConfig+0x1aa>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fda:	d104      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x1a2>
 8001fdc:	f7ff fbb0 	bl	8001740 <LL_RCC_HSE_EnableBypass>
 8001fe0:	f7ff fbcc 	bl	800177c <LL_RCC_HSE_Enable>
 8001fe4:	e003      	b.n	8001fee <HAL_RCC_OscConfig+0x1aa>
 8001fe6:	f7ff fbd8 	bl	800179a <LL_RCC_HSE_Disable>
 8001fea:	f7ff fbb8 	bl	800175e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fff1 	bl	8000fdc <HAL_GetTick>
 8001ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffe:	f7fe ffed 	bl	8000fdc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b64      	cmp	r3, #100	; 0x64
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e2a9      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002010:	f7ff fbd2 	bl	80017b8 <LL_RCC_HSE_IsReady>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f1      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1ba>
 800201a:	e013      	b.n	8002044 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe ffde 	bl	8000fdc <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe ffda 	bl	8000fdc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e296      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002036:	f7ff fbbf 	bl	80017b8 <LL_RCC_HSE_IsReady>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f1      	bne.n	8002024 <HAL_RCC_OscConfig+0x1e0>
 8002040:	e000      	b.n	8002044 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002042:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d051      	beq.n	80020f4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002050:	f7ff fd93 	bl	8001b7a <LL_RCC_GetSysClkSource>
 8002054:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002056:	f7ff fe8c 	bl	8001d72 <LL_RCC_PLL_GetMainSource>
 800205a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x22a>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d113      	bne.n	8002090 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d110      	bne.n	8002090 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800206e:	f7ff fbd3 	bl	8001818 <LL_RCC_HSI_IsReady>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_OscConfig+0x240>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e26f      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fbd7 	bl	800183c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800208e:	e031      	b.n	80020f4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d019      	beq.n	80020cc <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002098:	f7ff fba0 	bl	80017dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ff9e 	bl	8000fdc <HAL_GetTick>
 80020a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a4:	f7fe ff9a 	bl	8000fdc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e256      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 80020b6:	f7ff fbaf 	bl	8001818 <LL_RCC_HSI_IsReady>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f1      	beq.n	80020a4 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fbb9 	bl	800183c <LL_RCC_HSI_SetCalibTrimming>
 80020ca:	e013      	b.n	80020f4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020cc:	f7ff fb95 	bl	80017fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe ff84 	bl	8000fdc <HAL_GetTick>
 80020d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d8:	f7fe ff80 	bl	8000fdc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e23c      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 80020ea:	f7ff fb95 	bl	8001818 <LL_RCC_HSI_IsReady>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f1      	bne.n	80020d8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a2 	beq.w	8002252 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d075      	beq.n	8002202 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d046      	beq.n	80021b0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002122:	f7ff fc4c 	bl	80019be <LL_RCC_LSI1_IsReady>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d113      	bne.n	8002154 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800212c:	f7ff fc25 	bl	800197a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002130:	f7fe ff54 	bl	8000fdc <HAL_GetTick>
 8002134:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002138:	f7fe ff50 	bl	8000fdc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e20c      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800214a:	f7ff fc38 	bl	80019be <LL_RCC_LSI1_IsReady>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f1      	beq.n	8002138 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002154:	f7ff fc45 	bl	80019e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe ff40 	bl	8000fdc <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002160:	f7fe ff3c 	bl	8000fdc <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b03      	cmp	r3, #3
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1f8      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002172:	f7ff fc58 	bl	8001a26 <LL_RCC_LSI2_IsReady>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f1      	beq.n	8002160 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fc62 	bl	8001a4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002186:	f7ff fc09 	bl	800199c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe ff27 	bl	8000fdc <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002192:	f7fe ff23 	bl	8000fdc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1df      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021a4:	f7ff fc0b 	bl	80019be <LL_RCC_LSI1_IsReady>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f1      	bne.n	8002192 <HAL_RCC_OscConfig+0x34e>
 80021ae:	e050      	b.n	8002252 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80021b0:	f7ff fbe3 	bl	800197a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe ff12 	bl	8000fdc <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021bc:	f7fe ff0e 	bl	8000fdc <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d904      	bls.n	80021d4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1ca      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
 80021ce:	bf00      	nop
 80021d0:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021d4:	f7ff fbf3 	bl	80019be <LL_RCC_LSI1_IsReady>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0ee      	beq.n	80021bc <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80021de:	f7ff fc11 	bl	8001a04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021e4:	f7fe fefa 	bl	8000fdc <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1b6      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80021f6:	f7ff fc16 	bl	8001a26 <LL_RCC_LSI2_IsReady>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f1      	bne.n	80021e4 <HAL_RCC_OscConfig+0x3a0>
 8002200:	e027      	b.n	8002252 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002202:	f7ff fbff 	bl	8001a04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7fe fee9 	bl	8000fdc <HAL_GetTick>
 800220a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800220e:	f7fe fee5 	bl	8000fdc <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1a1      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002220:	f7ff fc01 	bl	8001a26 <LL_RCC_LSI2_IsReady>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f1      	bne.n	800220e <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800222a:	f7ff fbb7 	bl	800199c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fed5 	bl	8000fdc <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002236:	f7fe fed1 	bl	8000fdc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e18d      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002248:	f7ff fbb9 	bl	80019be <LL_RCC_LSI1_IsReady>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f1      	bne.n	8002236 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d05b      	beq.n	8002316 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225e:	4bb5      	ldr	r3, [pc, #724]	; (8002534 <HAL_RCC_OscConfig+0x6f0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d114      	bne.n	8002294 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800226a:	f7ff fa39 	bl	80016e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7fe feb5 	bl	8000fdc <HAL_GetTick>
 8002272:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7fe feb1 	bl	8000fdc <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e16d      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002288:	4baa      	ldr	r3, [pc, #680]	; (8002534 <HAL_RCC_OscConfig+0x6f0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0x45e>
 800229c:	f7ff fb17 	bl	80018ce <LL_RCC_LSE_Enable>
 80022a0:	e00c      	b.n	80022bc <HAL_RCC_OscConfig+0x478>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d104      	bne.n	80022b4 <HAL_RCC_OscConfig+0x470>
 80022aa:	f7ff fb32 	bl	8001912 <LL_RCC_LSE_EnableBypass>
 80022ae:	f7ff fb0e 	bl	80018ce <LL_RCC_LSE_Enable>
 80022b2:	e003      	b.n	80022bc <HAL_RCC_OscConfig+0x478>
 80022b4:	f7ff fb1c 	bl	80018f0 <LL_RCC_LSE_Disable>
 80022b8:	f7ff fb3c 	bl	8001934 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d014      	beq.n	80022ee <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fe8a 	bl	8000fdc <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe fe86 	bl	8000fdc <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e140      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 80022e2:	f7ff fb38 	bl	8001956 <LL_RCC_LSE_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ef      	beq.n	80022cc <HAL_RCC_OscConfig+0x488>
 80022ec:	e013      	b.n	8002316 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe fe75 	bl	8000fdc <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fe71 	bl	8000fdc <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e12b      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 800230c:	f7ff fb23 	bl	8001956 <LL_RCC_LSE_IsReady>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ef      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02c      	beq.n	800237c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	2b00      	cmp	r3, #0
 8002328:	d014      	beq.n	8002354 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800232a:	f7ff fa9c 	bl	8001866 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7fe fe55 	bl	8000fdc <HAL_GetTick>
 8002332:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002336:	f7fe fe51 	bl	8000fdc <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e10d      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002348:	f7ff faaf 	bl	80018aa <LL_RCC_HSI48_IsReady>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f1      	beq.n	8002336 <HAL_RCC_OscConfig+0x4f2>
 8002352:	e013      	b.n	800237c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002354:	f7ff fa98 	bl	8001888 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fe40 	bl	8000fdc <HAL_GetTick>
 800235c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002360:	f7fe fe3c 	bl	8000fdc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0f8      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002372:	f7ff fa9a 	bl	80018aa <LL_RCC_HSI48_IsReady>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f1      	bne.n	8002360 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80ee 	beq.w	8002562 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002386:	f7ff fbf8 	bl	8001b7a <LL_RCC_GetSysClkSource>
 800238a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	2b02      	cmp	r3, #2
 800239a:	f040 80af 	bne.w	80024fc <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d123      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d11c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d114      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10d      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d05d      	beq.n	80024b0 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d058      	beq.n	80024ac <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0ab      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800240c:	f7ff fc6b 	bl	8001ce6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002410:	f7fe fde4 	bl	8000fdc <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fde0 	bl	8000fdc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e09c      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ef      	bne.n	8002418 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <HAL_RCC_OscConfig+0x6f4>)
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002450:	0212      	lsls	r2, r2, #8
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800245e:	4311      	orrs	r1, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002464:	430a      	orrs	r2, r1
 8002466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800246a:	4313      	orrs	r3, r2
 800246c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800246e:	f7ff fc2b 	bl	8001cc8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002482:	f7fe fdab 	bl	8000fdc <HAL_GetTick>
 8002486:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe fda7 	bl	8000fdc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e063      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ef      	beq.n	800248a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024aa:	e05a      	b.n	8002562 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e059      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d151      	bne.n	8002562 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024be:	f7ff fc03 	bl	8001cc8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024d2:	f7fe fd83 	bl	8000fdc <HAL_GetTick>
 80024d6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fd7f 	bl	8000fdc <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e03b      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0ef      	beq.n	80024da <HAL_RCC_OscConfig+0x696>
 80024fa:	e032      	b.n	8002562 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d02d      	beq.n	800255e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	f7ff fbf0 	bl	8001ce6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002510:	f023 0303 	bic.w	r3, r3, #3
 8002514:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002520:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002528:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7fe fd57 	bl	8000fdc <HAL_GetTick>
 800252e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002530:	e00d      	b.n	800254e <HAL_RCC_OscConfig+0x70a>
 8002532:	bf00      	nop
 8002534:	58000400 	.word	0x58000400
 8002538:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fd4e 	bl	8000fdc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ef      	bne.n	800253c <HAL_RCC_OscConfig+0x6f8>
 800255c:	e001      	b.n	8002562 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3734      	adds	r7, #52	; 0x34
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}

0800256c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e12a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b97      	ldr	r3, [pc, #604]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d91b      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b94      	ldr	r3, [pc, #592]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4992      	ldr	r1, [pc, #584]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259e:	f7fe fd1d 	bl	8000fdc <HAL_GetTick>
 80025a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025a6:	f7fe fd19 	bl	8000fdc <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e10e      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b8:	4b89      	ldr	r3, [pc, #548]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d1ef      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fadb 	bl	8001b92 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025dc:	f7fe fcfe 	bl	8000fdc <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025e4:	f7fe fcfa 	bl	8000fdc <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0ef      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025f6:	f7ff fbc8 	bl	8001d8a <LL_RCC_IsActiveFlag_HPRE>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f1      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d016      	beq.n	800263a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fad2 	bl	8001bba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002616:	f7fe fce1 	bl	8000fdc <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800261e:	f7fe fcdd 	bl	8000fdc <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0d2      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002630:	f7ff fbbd 	bl	8001dae <LL_RCC_IsActiveFlag_C2HPRE>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f1      	beq.n	800261e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff facb 	bl	8001be6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002650:	f7fe fcc4 	bl	8000fdc <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002658:	f7fe fcc0 	bl	8000fdc <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0b5      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800266a:	f7ff fbb3 	bl	8001dd4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f1      	beq.n	8002658 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d016      	beq.n	80026ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fac5 	bl	8001c14 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800268a:	f7fe fca7 	bl	8000fdc <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002692:	f7fe fca3 	bl	8000fdc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e098      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026a4:	f7ff fba9 	bl	8001dfa <LL_RCC_IsActiveFlag_PPRE1>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f1      	beq.n	8002692 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d017      	beq.n	80026ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fabb 	bl	8001c3c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fc89 	bl	8000fdc <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ce:	f7fe fc85 	bl	8000fdc <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e07a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026e0:	f7ff fb9d 	bl	8001e1e <LL_RCC_IsActiveFlag_PPRE2>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f1      	beq.n	80026ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d043      	beq.n	800277e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d106      	bne.n	800270c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80026fe:	f7ff f85b 	bl	80017b8 <LL_RCC_HSE_IsReady>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11e      	bne.n	8002746 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e064      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d106      	bne.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002714:	f7ff faf6 	bl	8001d04 <LL_RCC_PLL_IsReady>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e059      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800272a:	f7ff f9c3 	bl	8001ab4 <LL_RCC_MSI_IsReady>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e04e      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002738:	f7ff f86e 	bl	8001818 <LL_RCC_HSI_IsReady>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e047      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fa01 	bl	8001b52 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe fc44 	bl	8000fdc <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7fe fc40 	bl	8000fdc <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e033      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	f7ff fa04 	bl	8001b7a <LL_RCC_GetSysClkSource>
 8002772:	4602      	mov	r2, r0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	429a      	cmp	r2, r3
 800277c:	d1ec      	bne.n	8002758 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d21b      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 0207 	bic.w	r2, r3, #7
 8002794:	4912      	ldr	r1, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fc1e 	bl	8000fdc <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027a4:	f7fe fc1a 	bl	8000fdc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e00f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1ef      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80027c4:	f7fe fac2 	bl	8000d4c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80027c8:	f7fe fc14 	bl	8000ff4 <HAL_GetTickPrio>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fbb6 	bl	8000f40 <HAL_InitTick>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	58004000 	.word	0x58004000

080027e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ea:	f7ff f9c6 	bl	8001b7a <LL_RCC_GetSysClkSource>
 80027ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027f6:	f7ff f982 	bl	8001afe <LL_RCC_MSI_GetRange>
 80027fa:	4603      	mov	r3, r0
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	4a2a      	ldr	r2, [pc, #168]	; (80028ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e04a      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b04      	cmp	r3, #4
 8002810:	d102      	bne.n	8002818 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002812:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e044      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b08      	cmp	r3, #8
 800281c:	d10a      	bne.n	8002834 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800281e:	f7fe ff7d 	bl	800171c <LL_RCC_HSE_IsEnabledDiv2>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d102      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e039      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e036      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002834:	f7ff fa9d 	bl	8001d72 <LL_RCC_PLL_GetMainSource>
 8002838:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d002      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x62>
 8002840:	2b03      	cmp	r3, #3
 8002842:	d003      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x68>
 8002844:	e00d      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002848:	60bb      	str	r3, [r7, #8]
        break;
 800284a:	e015      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800284c:	f7fe ff66 	bl	800171c <LL_RCC_HSE_IsEnabledDiv2>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002858:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800285a:	e00d      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800285e:	60bb      	str	r3, [r7, #8]
        break;
 8002860:	e00a      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002862:	f7ff f94c 	bl	8001afe <LL_RCC_MSI_GetRange>
 8002866:	4603      	mov	r3, r0
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	60bb      	str	r3, [r7, #8]
        break;
 8002876:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002878:	f7ff fa56 	bl	8001d28 <LL_RCC_PLL_GetN>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	fb03 f402 	mul.w	r4, r3, r2
 8002884:	f7ff fa69 	bl	8001d5a <LL_RCC_PLL_GetDivider>
 8002888:	4603      	mov	r3, r0
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	3301      	adds	r3, #1
 800288e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002892:	f7ff fa56 	bl	8001d42 <LL_RCC_PLL_GetR>
 8002896:	4603      	mov	r3, r0
 8002898:	0f5b      	lsrs	r3, r3, #29
 800289a:	3301      	adds	r3, #1
 800289c:	fbb4 f3f3 	udiv	r3, r4, r3
 80028a0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}
 80028ac:	08004330 	.word	0x08004330
 80028b0:	00f42400 	.word	0x00f42400
 80028b4:	01e84800 	.word	0x01e84800

080028b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b8:	b598      	push	{r3, r4, r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80028bc:	f7ff ff92 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80028c0:	4604      	mov	r4, r0
 80028c2:	f7ff f9cf 	bl	8001c64 <LL_RCC_GetAHBPrescaler>
 80028c6:	4603      	mov	r3, r0
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a03      	ldr	r2, [pc, #12]	; (80028dc <HAL_RCC_GetHCLKFreq+0x24>)
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd98      	pop	{r3, r4, r7, pc}
 80028dc:	080042d0 	.word	0x080042d0

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b598      	push	{r3, r4, r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028e4:	f7ff ffe8 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80028e8:	4604      	mov	r4, r0
 80028ea:	f7ff f9d5 	bl	8001c98 <LL_RCC_GetAPB1Prescaler>
 80028ee:	4603      	mov	r3, r0
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd98      	pop	{r3, r4, r7, pc}
 8002908:	08004310 	.word	0x08004310

0800290c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800290c:	b598      	push	{r3, r4, r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002910:	f7ff ffd2 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 8002914:	4604      	mov	r4, r0
 8002916:	f7ff f9cb 	bl	8001cb0 <LL_RCC_GetAPB2Prescaler>
 800291a:	4603      	mov	r3, r0
 800291c:	0adb      	lsrs	r3, r3, #11
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd98      	pop	{r3, r4, r7, pc}
 8002934:	08004310 	.word	0x08004310

08002938 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2bb0      	cmp	r3, #176	; 0xb0
 8002944:	d903      	bls.n	800294e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e007      	b.n	800295e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800295e:	f7ff f98d 	bl	8001c7c <LL_RCC_GetAHB4Prescaler>
 8002962:	4603      	mov	r3, r0
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	0c9c      	lsrs	r4, r3, #18
 8002982:	f7fe febd 	bl	8001700 <HAL_PWREx_GetVoltageRange>
 8002986:	4603      	mov	r3, r0
 8002988:	4619      	mov	r1, r3
 800298a:	4620      	mov	r0, r4
 800298c:	f000 f80c 	bl	80029a8 <RCC_SetFlashLatency>
 8002990:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}
 800299a:	bf00      	nop
 800299c:	08004330 	.word	0x08004330
 80029a0:	080042d0 	.word	0x080042d0
 80029a4:	431bde83 	.word	0x431bde83

080029a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b093      	sub	sp, #76	; 0x4c
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <RCC_SetFlashLatency+0xf0>)
 80029b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80029b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80029be:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <RCC_SetFlashLatency+0xf4>)
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80029c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80029ca:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <RCC_SetFlashLatency+0xf8>)
 80029cc:	f107 040c 	add.w	r4, r7, #12
 80029d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029d6:	2300      	movs	r3, #0
 80029d8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e0:	d11c      	bne.n	8002a1c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	643b      	str	r3, [r7, #64]	; 0x40
 80029e6:	e015      	b.n	8002a14 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80029f0:	4413      	add	r3, r2
 80029f2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d808      	bhi.n	8002a0e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002a04:	4413      	add	r3, r2
 8002a06:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a0a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a0c:	e022      	b.n	8002a54 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a10:	3301      	adds	r3, #1
 8002a12:	643b      	str	r3, [r7, #64]	; 0x40
 8002a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d9e6      	bls.n	80029e8 <RCC_SetFlashLatency+0x40>
 8002a1a:	e01b      	b.n	8002a54 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a20:	e015      	b.n	8002a4e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d808      	bhi.n	8002a48 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002a3e:	4413      	add	r3, r2
 8002a40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a44:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a46:	e005      	b.n	8002a54 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d9e6      	bls.n	8002a22 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <RCC_SetFlashLatency+0xfc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 0207 	bic.w	r2, r3, #7
 8002a5c:	4911      	ldr	r1, [pc, #68]	; (8002aa4 <RCC_SetFlashLatency+0xfc>)
 8002a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a64:	f7fe faba 	bl	8000fdc <HAL_GetTick>
 8002a68:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a6a:	e008      	b.n	8002a7e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a6c:	f7fe fab6 	bl	8000fdc <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e007      	b.n	8002a8e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <RCC_SetFlashLatency+0xfc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1ef      	bne.n	8002a6c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	374c      	adds	r7, #76	; 0x4c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	bf00      	nop
 8002a98:	08004294 	.word	0x08004294
 8002a9c:	080042a4 	.word	0x080042a4
 8002aa0:	080042b0 	.word	0x080042b0
 8002aa4:	58004000 	.word	0x58004000

08002aa8 <LL_RCC_LSE_IsEnabled>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <LL_RCC_LSE_IsEnabled+0x18>
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_RCC_LSE_IsReady>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d101      	bne.n	8002ae4 <LL_RCC_LSE_IsReady+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_RCC_LSE_IsReady+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_RCC_MSI_EnablePLLMode>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_SetRFWKPClockSource>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_SetSMPSClockSource>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f023 0203 	bic.w	r2, r3, #3
 8002b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_SetSMPSPrescaler>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_RCC_SetUSARTClockSource>:
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_SetLPUARTClockSource>:
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_SetI2CClockSource>:
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_SetLPTIMClockSource>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	43db      	mvns	r3, r3
 8002c34:	401a      	ands	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_RCC_SetSAIClockSource>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_SetRNGClockSource>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_RCC_SetCLK48ClockSource>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_SetUSBClockSource>:
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ffe3 	bl	8002ca8 <LL_RCC_SetCLK48ClockSource>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <LL_RCC_SetADCClockSource>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_RCC_SetRTCClockSource>:
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_GetRTCClockSource>:
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_RCC_ForceBackupDomainReset>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_RCC_PLLSAI1_Enable>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_PLLSAI1_Disable>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dd0:	6013      	str	r3, [r2, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_RCC_PLLSAI1_IsReady>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dee:	d101      	bne.n	8002df4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d033      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e24:	d00c      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2a:	d802      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e30:	e017      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e36:	d017      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002e38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e3c:	d016      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002e3e:	e010      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e50:	e00d      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f94d 	bl	80030f6 <RCCEx_PLLSAI1_ConfigNP>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e60:	e005      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	77fb      	strb	r3, [r7, #31]
        break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002e68:	bf00      	nop
 8002e6a:	e000      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fee9 	bl	8002c50 <LL_RCC_SetSAIClockSource>
 8002e7e:	e001      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e80:	7ffb      	ldrb	r3, [r7, #31]
 8002e82:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d046      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002e90:	f7ff ff57 	bl	8002d42 <LL_RCC_GetRTCClockSource>
 8002e94:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d03c      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ea0:	f7fe fc1e 	bl	80016e0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff31 	bl	8002d16 <LL_RCC_SetRTCClockSource>
 8002eb4:	e02e      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002ec0:	f7ff ff4c 	bl	8002d5c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002ec4:	f7ff ff5b 	bl	8002d7e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002ee0:	f7ff fde2 	bl	8002aa8 <LL_RCC_LSE_IsEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d114      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eea:	f7fe f877 	bl	8000fdc <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe f873 	bl	8000fdc <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d902      	bls.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	77fb      	strb	r3, [r7, #31]
              break;
 8002f08:	e004      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f0a:	f7ff fddf 	bl	8002acc <LL_RCC_LSE_IsReady>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002f14:	7ffb      	ldrb	r3, [r7, #31]
 8002f16:	77bb      	strb	r3, [r7, #30]
 8002f18:	e001      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	7ffb      	ldrb	r3, [r7, #31]
 8002f1c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fe2b 	bl	8002b8a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fe36 	bl	8002bb6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fe5e 	bl	8002c1c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fe53 	bl	8002c1c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fe2b 	bl	8002be2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fe20 	bl	8002be2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d022      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fe8e 	bl	8002cd4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 f8e3 	bl	80031ac <RCCEx_PLLSAI1_ConfigNQ>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002fea:	7ffb      	ldrb	r3, [r7, #31]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02b      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d008      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003012:	d003      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fe2b 	bl	8002c7c <LL_RCC_SetRNGClockSource>
 8003026:	e00a      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	2000      	movs	r0, #0
 8003034:	f7ff fe22 	bl	8002c7c <LL_RCC_SetRNGClockSource>
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff fe35 	bl	8002ca8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003046:	d107      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003056:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d022      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fe3e 	bl	8002cea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003076:	d107      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003086:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003090:	d10b      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f8e3 	bl	8003262 <RCCEx_PLLSAI1_ConfigNR>
 800309c:	4603      	mov	r3, r0
 800309e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80030a0:	7ffb      	ldrb	r3, [r7, #31]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80030a6:	7ffb      	ldrb	r3, [r7, #31]
 80030a8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fd27 	bl	8002b0e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fd46 	bl	8002b62 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fd2d 	bl	8002b3a <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 80030e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80030ee:	f7ff fcff 	bl	8002af0 <LL_RCC_MSI_EnablePLLMode>
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003102:	f7ff fe5c 	bl	8002dbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003106:	f7fd ff69 	bl	8000fdc <HAL_GetTick>
 800310a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800310c:	e009      	b.n	8003122 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800310e:	f7fd ff65 	bl	8000fdc <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d902      	bls.n	8003122 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	73fb      	strb	r3, [r7, #15]
      break;
 8003120:	e004      	b.n	800312c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003122:	f7ff fe5b 	bl	8002ddc <LL_RCC_PLLSAI1_IsReady>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d137      	bne.n	80031a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003146:	4313      	orrs	r3, r2
 8003148:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800315c:	4313      	orrs	r3, r2
 800315e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003160:	f7ff fe1e 	bl	8002da0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fd ff3a 	bl	8000fdc <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800316c:	f7fd ff36 	bl	8000fdc <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
        break;
 800317e:	e004      	b.n	800318a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003180:	f7ff fe2c 	bl	8002ddc <LL_RCC_PLLSAI1_IsReady>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d1f0      	bne.n	800316c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d108      	bne.n	80031a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319e:	4313      	orrs	r3, r2
 80031a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031b8:	f7ff fe01 	bl	8002dbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031bc:	f7fd ff0e 	bl	8000fdc <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031c2:	e009      	b.n	80031d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c4:	f7fd ff0a 	bl	8000fdc <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d902      	bls.n	80031d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	73fb      	strb	r3, [r7, #15]
      break;
 80031d6:	e004      	b.n	80031e2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031d8:	f7ff fe00 	bl	8002ddc <LL_RCC_PLLSAI1_IsReady>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d137      	bne.n	8003258 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031fc:	4313      	orrs	r3, r2
 80031fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003212:	4313      	orrs	r3, r2
 8003214:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003216:	f7ff fdc3 	bl	8002da0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800321a:	f7fd fedf 	bl	8000fdc <HAL_GetTick>
 800321e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003220:	e009      	b.n	8003236 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003222:	f7fd fedb 	bl	8000fdc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d902      	bls.n	8003236 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	73fb      	strb	r3, [r7, #15]
        break;
 8003234:	e004      	b.n	8003240 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003236:	f7ff fdd1 	bl	8002ddc <LL_RCC_PLLSAI1_IsReady>
 800323a:	4603      	mov	r3, r0
 800323c:	2b01      	cmp	r3, #1
 800323e:	d1f0      	bne.n	8003222 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d108      	bne.n	8003258 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003254:	4313      	orrs	r3, r2
 8003256:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800326e:	f7ff fda6 	bl	8002dbe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003272:	f7fd feb3 	bl	8000fdc <HAL_GetTick>
 8003276:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003278:	e009      	b.n	800328e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327a:	f7fd feaf 	bl	8000fdc <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d902      	bls.n	800328e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	73fb      	strb	r3, [r7, #15]
      break;
 800328c:	e004      	b.n	8003298 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800328e:	f7ff fda5 	bl	8002ddc <LL_RCC_PLLSAI1_IsReady>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d137      	bne.n	800330e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b2:	4313      	orrs	r3, r2
 80032b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c8:	4313      	orrs	r3, r2
 80032ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032cc:	f7ff fd68 	bl	8002da0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d0:	f7fd fe84 	bl	8000fdc <HAL_GetTick>
 80032d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032d6:	e009      	b.n	80032ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d8:	f7fd fe80 	bl	8000fdc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d902      	bls.n	80032ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	73fb      	strb	r3, [r7, #15]
        break;
 80032ea:	e004      	b.n	80032f6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032ec:	f7ff fd76 	bl	8002ddc <LL_RCC_PLLSAI1_IsReady>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d1f0      	bne.n	80032d8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d108      	bne.n	800330e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330a:	4313      	orrs	r3, r2
 800330c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <LL_RCC_GetUSARTClockSource>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4013      	ands	r3, r2
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_RCC_GetLPUARTClockSource>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4013      	ands	r3, r2
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e042      	b.n	80033f0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd fc01 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2224      	movs	r2, #36	; 0x24
 8003386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f992 	bl	80036c4 <UART_SetConfig>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e022      	b.n	80033f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fb94 	bl	8003ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fc1b 	bl	8003c24 <UART_CheckIdleState>
 80033ee:	4603      	mov	r3, r0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 8083 	bne.w	800351a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_UART_Transmit+0x28>
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e07b      	b.n	800351c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_UART_Transmit+0x3a>
 800342e:	2302      	movs	r3, #2
 8003430:	e074      	b.n	800351c <HAL_UART_Transmit+0x124>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2221      	movs	r2, #33	; 0x21
 8003446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800344a:	f7fd fdc7 	bl	8000fdc <HAL_GetTick>
 800344e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	88fa      	ldrh	r2, [r7, #6]
 8003454:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003468:	d108      	bne.n	800347c <HAL_UART_Transmit+0x84>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e003      	b.n	8003484 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800348c:	e02c      	b.n	80034e8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fc0b 	bl	8003cb4 <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e039      	b.n	800351c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3302      	adds	r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	e007      	b.n	80034d6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	3301      	adds	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1cc      	bne.n	800348e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2140      	movs	r1, #64	; 0x40
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fbd8 	bl	8003cb4 <UART_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e006      	b.n	800351c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353a:	2b20      	cmp	r3, #32
 800353c:	f040 80bd 	bne.w	80036ba <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_UART_Receive+0x28>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0b5      	b.n	80036bc <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_UART_Receive+0x3a>
 800355a:	2302      	movs	r3, #2
 800355c:	e0ae      	b.n	80036bc <HAL_UART_Receive+0x198>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2222      	movs	r2, #34	; 0x22
 8003572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003576:	f7fd fd31 	bl	8000fdc <HAL_GetTick>
 800357a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003594:	d10e      	bne.n	80035b4 <HAL_UART_Receive+0x90>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_UART_Receive+0x86>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035a8:	e02d      	b.n	8003606 <HAL_UART_Receive+0xe2>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	22ff      	movs	r2, #255	; 0xff
 80035ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035b2:	e028      	b.n	8003606 <HAL_UART_Receive+0xe2>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_UART_Receive+0xb4>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <HAL_UART_Receive+0xaa>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	22ff      	movs	r2, #255	; 0xff
 80035c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035cc:	e01b      	b.n	8003606 <HAL_UART_Receive+0xe2>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	227f      	movs	r2, #127	; 0x7f
 80035d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035d6:	e016      	b.n	8003606 <HAL_UART_Receive+0xe2>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035e0:	d10d      	bne.n	80035fe <HAL_UART_Receive+0xda>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_UART_Receive+0xd0>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	227f      	movs	r2, #127	; 0x7f
 80035ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035f2:	e008      	b.n	8003606 <HAL_UART_Receive+0xe2>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	223f      	movs	r2, #63	; 0x3f
 80035f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035fc:	e003      	b.n	8003606 <HAL_UART_Receive+0xe2>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800360c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003616:	d108      	bne.n	800362a <HAL_UART_Receive+0x106>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	e003      	b.n	8003632 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800363a:	e032      	b.n	80036a2 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2200      	movs	r2, #0
 8003644:	2120      	movs	r1, #32
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fb34 	bl	8003cb4 <UART_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e032      	b.n	80036bc <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10c      	bne.n	8003676 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	b29a      	uxth	r2, r3
 8003664:	8a7b      	ldrh	r3, [r7, #18]
 8003666:	4013      	ands	r3, r2
 8003668:	b29a      	uxth	r2, r3
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3302      	adds	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	e00c      	b.n	8003690 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	b2da      	uxtb	r2, r3
 800367e:	8a7b      	ldrh	r3, [r7, #18]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4013      	ands	r3, r2
 8003684:	b2da      	uxtb	r2, r3
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3301      	adds	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1c6      	bne.n	800363c <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80036c8:	b088      	sub	sp, #32
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4ba4      	ldr	r3, [pc, #656]	; (800398c <UART_SetConfig+0x2c8>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	69f9      	ldr	r1, [r7, #28]
 8003704:	430b      	orrs	r3, r1
 8003706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a99      	ldr	r2, [pc, #612]	; (8003990 <UART_SetConfig+0x2cc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	4313      	orrs	r3, r2
 8003736:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003742:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	430b      	orrs	r3, r1
 800374e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f023 010f 	bic.w	r1, r3, #15
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a8a      	ldr	r2, [pc, #552]	; (8003994 <UART_SetConfig+0x2d0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d121      	bne.n	80037b4 <UART_SetConfig+0xf0>
 8003770:	2003      	movs	r0, #3
 8003772:	f7ff fdd1 	bl	8003318 <LL_RCC_GetUSARTClockSource>
 8003776:	4603      	mov	r3, r0
 8003778:	2b03      	cmp	r3, #3
 800377a:	d817      	bhi.n	80037ac <UART_SetConfig+0xe8>
 800377c:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <UART_SetConfig+0xc0>)
 800377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003782:	bf00      	nop
 8003784:	08003795 	.word	0x08003795
 8003788:	080037a1 	.word	0x080037a1
 800378c:	0800379b 	.word	0x0800379b
 8003790:	080037a7 	.word	0x080037a7
 8003794:	2301      	movs	r3, #1
 8003796:	76fb      	strb	r3, [r7, #27]
 8003798:	e038      	b.n	800380c <UART_SetConfig+0x148>
 800379a:	2302      	movs	r3, #2
 800379c:	76fb      	strb	r3, [r7, #27]
 800379e:	e035      	b.n	800380c <UART_SetConfig+0x148>
 80037a0:	2304      	movs	r3, #4
 80037a2:	76fb      	strb	r3, [r7, #27]
 80037a4:	e032      	b.n	800380c <UART_SetConfig+0x148>
 80037a6:	2308      	movs	r3, #8
 80037a8:	76fb      	strb	r3, [r7, #27]
 80037aa:	e02f      	b.n	800380c <UART_SetConfig+0x148>
 80037ac:	2310      	movs	r3, #16
 80037ae:	76fb      	strb	r3, [r7, #27]
 80037b0:	bf00      	nop
 80037b2:	e02b      	b.n	800380c <UART_SetConfig+0x148>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a75      	ldr	r2, [pc, #468]	; (8003990 <UART_SetConfig+0x2cc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d124      	bne.n	8003808 <UART_SetConfig+0x144>
 80037be:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80037c2:	f7ff fdb9 	bl	8003338 <LL_RCC_GetLPUARTClockSource>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037cc:	d012      	beq.n	80037f4 <UART_SetConfig+0x130>
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d2:	d802      	bhi.n	80037da <UART_SetConfig+0x116>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <UART_SetConfig+0x124>
 80037d8:	e012      	b.n	8003800 <UART_SetConfig+0x13c>
 80037da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037de:	d006      	beq.n	80037ee <UART_SetConfig+0x12a>
 80037e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e4:	d009      	beq.n	80037fa <UART_SetConfig+0x136>
 80037e6:	e00b      	b.n	8003800 <UART_SetConfig+0x13c>
 80037e8:	2300      	movs	r3, #0
 80037ea:	76fb      	strb	r3, [r7, #27]
 80037ec:	e00e      	b.n	800380c <UART_SetConfig+0x148>
 80037ee:	2302      	movs	r3, #2
 80037f0:	76fb      	strb	r3, [r7, #27]
 80037f2:	e00b      	b.n	800380c <UART_SetConfig+0x148>
 80037f4:	2304      	movs	r3, #4
 80037f6:	76fb      	strb	r3, [r7, #27]
 80037f8:	e008      	b.n	800380c <UART_SetConfig+0x148>
 80037fa:	2308      	movs	r3, #8
 80037fc:	76fb      	strb	r3, [r7, #27]
 80037fe:	e005      	b.n	800380c <UART_SetConfig+0x148>
 8003800:	2310      	movs	r3, #16
 8003802:	76fb      	strb	r3, [r7, #27]
 8003804:	bf00      	nop
 8003806:	e001      	b.n	800380c <UART_SetConfig+0x148>
 8003808:	2310      	movs	r3, #16
 800380a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5f      	ldr	r2, [pc, #380]	; (8003990 <UART_SetConfig+0x2cc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	f040 808e 	bne.w	8003934 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003818:	7efb      	ldrb	r3, [r7, #27]
 800381a:	2b08      	cmp	r3, #8
 800381c:	d823      	bhi.n	8003866 <UART_SetConfig+0x1a2>
 800381e:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <UART_SetConfig+0x160>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003849 	.word	0x08003849
 8003828:	08003867 	.word	0x08003867
 800382c:	08003851 	.word	0x08003851
 8003830:	08003867 	.word	0x08003867
 8003834:	08003857 	.word	0x08003857
 8003838:	08003867 	.word	0x08003867
 800383c:	08003867 	.word	0x08003867
 8003840:	08003867 	.word	0x08003867
 8003844:	0800385f 	.word	0x0800385f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003848:	f7ff f84a 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 800384c:	6178      	str	r0, [r7, #20]
        break;
 800384e:	e00f      	b.n	8003870 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003850:	4b51      	ldr	r3, [pc, #324]	; (8003998 <UART_SetConfig+0x2d4>)
 8003852:	617b      	str	r3, [r7, #20]
        break;
 8003854:	e00c      	b.n	8003870 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003856:	f7fe ffc5 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 800385a:	6178      	str	r0, [r7, #20]
        break;
 800385c:	e008      	b.n	8003870 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800385e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003862:	617b      	str	r3, [r7, #20]
        break;
 8003864:	e004      	b.n	8003870 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	76bb      	strb	r3, [r7, #26]
        break;
 800386e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 811c 	beq.w	8003ab0 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	4a47      	ldr	r2, [pc, #284]	; (800399c <UART_SetConfig+0x2d8>)
 800387e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003882:	461a      	mov	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fbb3 f3f2 	udiv	r3, r3, r2
 800388a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d305      	bcc.n	80038a8 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d902      	bls.n	80038ae <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	76bb      	strb	r3, [r7, #26]
 80038ac:	e100      	b.n	8003ab0 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <UART_SetConfig+0x2d8>)
 80038bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f04f 0400 	mov.w	r4, #0
 80038c6:	461a      	mov	r2, r3
 80038c8:	4623      	mov	r3, r4
 80038ca:	f7fc fc69 	bl	80001a0 <__aeabi_uldivmod>
 80038ce:	4603      	mov	r3, r0
 80038d0:	460c      	mov	r4, r1
 80038d2:	4619      	mov	r1, r3
 80038d4:	4622      	mov	r2, r4
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f04f 0400 	mov.w	r4, #0
 80038de:	0214      	lsls	r4, r2, #8
 80038e0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80038e4:	020b      	lsls	r3, r1, #8
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6852      	ldr	r2, [r2, #4]
 80038ea:	0852      	lsrs	r2, r2, #1
 80038ec:	4611      	mov	r1, r2
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	eb13 0b01 	adds.w	fp, r3, r1
 80038f6:	eb44 0c02 	adc.w	ip, r4, r2
 80038fa:	4658      	mov	r0, fp
 80038fc:	4661      	mov	r1, ip
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f04f 0400 	mov.w	r4, #0
 8003906:	461a      	mov	r2, r3
 8003908:	4623      	mov	r3, r4
 800390a:	f7fc fc49 	bl	80001a0 <__aeabi_uldivmod>
 800390e:	4603      	mov	r3, r0
 8003910:	460c      	mov	r4, r1
 8003912:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800391a:	d308      	bcc.n	800392e <UART_SetConfig+0x26a>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003922:	d204      	bcs.n	800392e <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	e0c0      	b.n	8003ab0 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	76bb      	strb	r3, [r7, #26]
 8003932:	e0bd      	b.n	8003ab0 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393c:	d169      	bne.n	8003a12 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800393e:	7efb      	ldrb	r3, [r7, #27]
 8003940:	3b01      	subs	r3, #1
 8003942:	2b07      	cmp	r3, #7
 8003944:	d82c      	bhi.n	80039a0 <UART_SetConfig+0x2dc>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <UART_SetConfig+0x288>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	0800396d 	.word	0x0800396d
 8003950:	08003975 	.word	0x08003975
 8003954:	080039a1 	.word	0x080039a1
 8003958:	0800397b 	.word	0x0800397b
 800395c:	080039a1 	.word	0x080039a1
 8003960:	080039a1 	.word	0x080039a1
 8003964:	080039a1 	.word	0x080039a1
 8003968:	08003983 	.word	0x08003983
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7fe ffce 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8003970:	6178      	str	r0, [r7, #20]
        break;
 8003972:	e01a      	b.n	80039aa <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <UART_SetConfig+0x2d4>)
 8003976:	617b      	str	r3, [r7, #20]
        break;
 8003978:	e017      	b.n	80039aa <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7fe ff33 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 800397e:	6178      	str	r0, [r7, #20]
        break;
 8003980:	e013      	b.n	80039aa <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003986:	617b      	str	r3, [r7, #20]
        break;
 8003988:	e00f      	b.n	80039aa <UART_SetConfig+0x2e6>
 800398a:	bf00      	nop
 800398c:	cfff69f3 	.word	0xcfff69f3
 8003990:	40008000 	.word	0x40008000
 8003994:	40013800 	.word	0x40013800
 8003998:	00f42400 	.word	0x00f42400
 800399c:	08004370 	.word	0x08004370
      default:
        pclk = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	76bb      	strb	r3, [r7, #26]
        break;
 80039a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d07f      	beq.n	8003ab0 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	4a48      	ldr	r2, [pc, #288]	; (8003ad8 <UART_SetConfig+0x414>)
 80039b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039ba:	461a      	mov	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fbb3 f3f2 	udiv	r3, r3, r2
 80039c2:	005a      	lsls	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	441a      	add	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	d916      	bls.n	8003a0c <UART_SetConfig+0x348>
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d212      	bcs.n	8003a0c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f023 030f 	bic.w	r3, r3, #15
 80039ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	89fb      	ldrh	r3, [r7, #14]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	89fa      	ldrh	r2, [r7, #14]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	e051      	b.n	8003ab0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	76bb      	strb	r3, [r7, #26]
 8003a10:	e04e      	b.n	8003ab0 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a12:	7efb      	ldrb	r3, [r7, #27]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	2b07      	cmp	r3, #7
 8003a18:	d821      	bhi.n	8003a5e <UART_SetConfig+0x39a>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <UART_SetConfig+0x35c>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a41 	.word	0x08003a41
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a4f 	.word	0x08003a4f
 8003a30:	08003a5f 	.word	0x08003a5f
 8003a34:	08003a5f 	.word	0x08003a5f
 8003a38:	08003a5f 	.word	0x08003a5f
 8003a3c:	08003a57 	.word	0x08003a57
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a40:	f7fe ff64 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8003a44:	6178      	str	r0, [r7, #20]
        break;
 8003a46:	e00f      	b.n	8003a68 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a48:	4b24      	ldr	r3, [pc, #144]	; (8003adc <UART_SetConfig+0x418>)
 8003a4a:	617b      	str	r3, [r7, #20]
        break;
 8003a4c:	e00c      	b.n	8003a68 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4e:	f7fe fec9 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 8003a52:	6178      	str	r0, [r7, #20]
        break;
 8003a54:	e008      	b.n	8003a68 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5a:	617b      	str	r3, [r7, #20]
        break;
 8003a5c:	e004      	b.n	8003a68 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	76bb      	strb	r3, [r7, #26]
        break;
 8003a66:	bf00      	nop
    }

    if (pclk != 0U)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d020      	beq.n	8003ab0 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <UART_SetConfig+0x414>)
 8003a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	d908      	bls.n	8003aac <UART_SetConfig+0x3e8>
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d204      	bcs.n	8003aac <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	e001      	b.n	8003ab0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003acc:	7ebb      	ldrb	r3, [r7, #26]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003ad8:	08004370 	.word	0x08004370
 8003adc:	00f42400 	.word	0x00f42400

08003ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01a      	beq.n	8003bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bde:	d10a      	bne.n	8003bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c34:	f7fd f9d2 	bl	8000fdc <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d10e      	bne.n	8003c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f82c 	bl	8003cb4 <UART_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e022      	b.n	8003cac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d10e      	bne.n	8003c92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f816 	bl	8003cb4 <UART_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e00c      	b.n	8003cac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc4:	e062      	b.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d05e      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fd f985 	bl	8000fdc <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11d      	bne.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cf2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e045      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d02e      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3c:	d126      	bne.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d46:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00f      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d08d      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_UARTEx_DisableFifoMode+0x16>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e027      	b.n	8003e1a <HAL_UARTEx_DisableFifoMode+0x66>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2224      	movs	r2, #36	; 0x24
 8003dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003df8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e02d      	b.n	8003e9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2224      	movs	r2, #36	; 0x24
 8003e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f850 	bl	8003f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e02d      	b.n	8003f16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2224      	movs	r2, #36	; 0x24
 8003ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f812 	bl	8003f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003f28:	4a2f      	ldr	r2, [pc, #188]	; (8003fe8 <UARTEx_SetNbDataToProcess+0xc8>)
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003f36:	4a2d      	ldr	r2, [pc, #180]	; (8003fec <UARTEx_SetNbDataToProcess+0xcc>)
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f5c:	e03d      	b.n	8003fda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f5e:	2308      	movs	r3, #8
 8003f60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f62:	2308      	movs	r3, #8
 8003f64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	0e5b      	lsrs	r3, r3, #25
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	0f5b      	lsrs	r3, r3, #29
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003f86:	7fbb      	ldrb	r3, [r7, #30]
 8003f88:	7f3a      	ldrb	r2, [r7, #28]
 8003f8a:	f107 0120 	add.w	r1, r7, #32
 8003f8e:	440a      	add	r2, r1
 8003f90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003f94:	fb02 f303 	mul.w	r3, r2, r3
 8003f98:	7f3a      	ldrb	r2, [r7, #28]
 8003f9a:	f107 0120 	add.w	r1, r7, #32
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003fb0:	7ffb      	ldrb	r3, [r7, #31]
 8003fb2:	7f7a      	ldrb	r2, [r7, #29]
 8003fb4:	f107 0120 	add.w	r1, r7, #32
 8003fb8:	440a      	add	r2, r1
 8003fba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	7f7a      	ldrb	r2, [r7, #29]
 8003fc4:	f107 0120 	add.w	r1, r7, #32
 8003fc8:	440a      	add	r2, r1
 8003fca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003fce:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003fda:	bf00      	nop
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	080042c0 	.word	0x080042c0
 8003fec:	080042c8 	.word	0x080042c8

08003ff0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ff8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003ffc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	b29b      	uxth	r3, r3
 800400a:	4313      	orrs	r3, r2
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800402a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800402e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	b29b      	uxth	r3, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	b29b      	uxth	r3, r3
 8004040:	4013      	ands	r3, r2
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004058:	b084      	sub	sp, #16
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	f107 0014 	add.w	r0, r7, #20
 8004066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ffb0 	bl	8003ff0 <USB_EnableGlobalInt>

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800409c:	b004      	add	sp, #16
 800409e:	4770      	bx	lr

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4e0d      	ldr	r6, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1ba4      	subs	r4, r4, r6
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2500      	movs	r5, #0
 80040ac:	42a5      	cmp	r5, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4e0b      	ldr	r6, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 f820 	bl	80040f8 <_init>
 80040b8:	1ba4      	subs	r4, r4, r6
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2500      	movs	r5, #0
 80040be:	42a5      	cmp	r5, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040c8:	4798      	blx	r3
 80040ca:	3501      	adds	r5, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040d2:	4798      	blx	r3
 80040d4:	3501      	adds	r5, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004390 	.word	0x08004390
 80040dc:	08004390 	.word	0x08004390
 80040e0:	08004390 	.word	0x08004390
 80040e4:	08004394 	.word	0x08004394

080040e8 <memset>:
 80040e8:	4402      	add	r2, r0
 80040ea:	4603      	mov	r3, r0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	f803 1b01 	strb.w	r1, [r3], #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <_init>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr

08004104 <_fini>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr
